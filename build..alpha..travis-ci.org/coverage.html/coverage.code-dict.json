{"/home/travis/build/npmtest/node-npmtest-sphinxapi/test.js":"/* istanbul instrument in package npmtest_sphinxapi */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sphinxapi/lib.npmtest_sphinxapi.js":"/* istanbul instrument in package npmtest_sphinxapi */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sphinxapi = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sphinxapi = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sphinxapi/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sphinxapi && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sphinxapi */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sphinxapi\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sphinxapi.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sphinxapi.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sphinxapi.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sphinxapi.__dirname + '/lib.npmtest_sphinxapi.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sphinxapi/node_modules/sphinxapi/index.js":"module.exports = require('./lib/sphinxapi.js');\n","/home/travis/build/npmtest/node-npmtest-sphinxapi/node_modules/sphinxapi/lib/sphinxapi.js":"'use strict'\n/*!\n* sphinxapi\n* Copyright(c) 2012 Nicolas Thouvenin <nthouvenin@gmail.com>\n* MIT Licensed\n*/\n\n/**\n* Module dependencies.\n*/\nvar net   = require('net'),\n\tbp    = require('bufferpack'),\n\tPut   = require('put'),\n\tassert = require('assert'),\n\tutil = require('util'),\n\tdebug = require('debug')('SphinxClient'),\n\tserver_say = require('debug')('server'),\n\tclient_say = require('debug')('client')\n;\n\n/**\n* Useful function\n*\n* @api private\n*/\n\nfunction packUInt64(number) {\n  return Put().word64be(number).buffer()\n}\n\nfunction packInt64(number) {\n  return Put().word64be(number).buffer()\n}\n\nfunction unpackUInt64(buffer) {\n  var high = buffer.readUInt32BE(0)\n  var low = buffer.readUInt32BE(4)\n  return high*4294967296+low\n}\n\nfunction unpackInt64(buffer) {\n  var high = buffer.readInt32BE(0)\n  var low = buffer.readInt32BE(4)\n  return low\n}\n\nfunction ConcatBuffer(a, b) {\n\tvar t = new Buffer(a.length + b.length)\n\ta.copy(t, 0, 0)\n\tb.copy(t, a.length, 0)\n\treturn t\n}\nfunction ReduceBuffer(a, b) {\n\treturn ConcatBuffer(a, Buffer.isBuffer(b) ? b : new Buffer(b));\n}\n\nfunction forEach(o, fn) {\n\tif (Array.isArray(o)) {\n\t\treturn o.forEach(fn);\n\t}\n\telse {\n\t\tfor (var key in o) {\n\t\t\tif (o.hasOwnProperty(key)) {\n\t\t\t\tfn(o[key], key)\n\t\t\t}\n\t\t}\n\t}\n}\nfunction len (o){\n\tif (Array.isArray(o)) {\n\t\treturn o.length;\n\t}\n\telse if (typeof o == 'string') {\n\t\treturn Buffer.byteLength(o)\n\t}\n\telse {\n\t\tvar k, l = 0;\n\t\tfor(k in o) {\n\t\t\tl += Number( o.hasOwnProperty(k) );\n\t\t}\n\t\treturn l;\n\t}\n}\nfunction unpack(a, b) {\n\treturn bp.unpack(a, b);\n}\nfunction pack(a, b) {\n\treturn bp.pack(a, b);\n}\n\n/**\n* SphinxClient Object\n*\n* @api public\n*/\nfunction SphinxClient() {\n\tif (!(this instanceof SphinxClient)) {\n\t\treturn new SphinxClient()\n\t}\n\n\tthis._host\t\t\t= 'localhost'\t\t\t\t\t// searchd host (default is \"localhost\")\n\tthis._port\t\t\t= 9312\t\t\t\t\t\t\t// searchd port (default is 9312)\n\tthis._path\t\t\t= null\t\t\t\t\t\t\t// searchd unix-domain socket path\n\tthis._socket\t\t= null\n\tthis._offset\t\t= 0\t\t\t\t\t\t\t\t// how much records to seek from result-set start (default is 0)\n\tthis._limit\t\t\t= 20\t\t\t\t\t\t\t// how much records to return from result-set starting at offset (default is 20)\n\tthis._mode\t\t\t= SphinxClient.SPH_MATCH_ALL\t\t\t// query matching mode (default is SPH_MATCH_ALL)\n\tthis._weights\t\t= []\t\t\t\t\t\t\t// per-field weights (default is 1 for all fields)\n\tthis._sort\t\t\t= SphinxClient.SPH_SORT_RELEVANCE\t\t// match sorting mode (default is SPH_SORT_RELEVANCE)\n\tthis._sortby\t\t= ''\t\t\t\t\t\t\t// attribute to sort by (defualt is \"\")\n\tthis._min_id\t\t= 0\t\t\t\t\t\t\t\t// min ID to match (default is 0)\n\tthis._max_id\t\t= 0\t\t\t\t\t\t\t\t// max ID to match (default is UINT_MAX)\n\tthis._filters\t\t= []\t\t\t\t\t\t\t// search filters\n\tthis._groupby\t\t= ''\t\t\t\t\t\t\t// group-by attribute name\n\tthis._groupfunc\t\t= SphinxClient.SPH_GROUPBY_DAY // group-by function (to pre-process group-by attribute value with)\n\tthis._groupsort\t\t= '@group desc'\t\t\t\t\t// group-by sorting clause (to sort groups in result set with)\n\tthis._groupdistinct\t= ''\t\t\t\t\t\t\t// group-by count-distinct attribute\n\tthis._maxmatches\t= 1000\t\t\t\t\t\t\t// max matches to retrieve\n\tthis._cutoff\t\t= 0\t\t\t\t\t\t\t\t// cutoff to stop searching at\n\tthis._retrycount\t= 0\t\t\t\t\t\t\t\t// distributed retry count\n\tthis._retrydelay\t= 0\t\t\t\t\t\t\t\t// distributed retry delay\n\tthis._anchor\t\t= {}\t\t\t\t\t\t\t// geographical anchor point\n\tthis._indexweights\t= {}\t\t\t\t\t\t\t// per-index weights\n\tthis._ranker\t\t= SphinxClient.SPH_RANK_PROXIMITY_BM25  // ranking mode\n\tthis._rankexpr\t\t= ''\t\t\t\t\t\t\t// ranking expression for SPH_RANK_EXPR\n\tthis._maxquerytime\t= 0\t\t\t\t\t\t\t\t// max query time, milliseconds (default is 0, do not limit)\n\tthis._timeout\t\t= 1.0\t\t\t\t\t\t\t// connection timeout\n\tthis._fieldweights\t= {}\t\t\t\t\t\t\t// per-field-name weights\n\tthis._overrides\t\t= {}\t\t\t\t\t\t\t// per-query attribute values overrides\n\tthis._select\t\t= '*'\t\t\t\t\t\t\t// select-list (attributes or expressions, with optional aliases)\n\n\tthis._error\t\t\t= ''\t\t\t\t\t\t\t// last error message\n\tthis._warning\t\t= ''\t\t\t\t\t\t\t// last warning message\n\tthis._reqs\t\t\t= []\t\t\t\t\t\t\t// requests array for multi-query\n};\n/**\n* Sets and sends request packet to searchd server.\n*\n* @api private\n*/\nSphinxClient.prototype._SendRequest = function (client_ver, request, fn) {\n  var self = this\n\tdebug('Connecting to ' + self._host + ':' + self._port)\n\tvar client = net.connect(self._port, self._host)\n\tclient.on('connect', function () {\n\t\t\tclient_say('connected')\n\t});\n\tclient.once('data', function (chunk) {\n\t\t\tchunk.slice(0, 4)\n\n\t\t\tvar response = unpack('>L', chunk)\n\t\t\tserver_say('>L', response)\n\t\t\tif (!Array.isArray(response)) {\n\t\t\t\tfn(new Error('connection to ' + self._host + ':' + self._port + ' failed'))\n\t\t\t} else if (Array.isArray(response) && response[0] < 1) {\n\t\t\t\tfn(new Error('expected searchd protocol version, got ' + response[0]))\n\t\t\t}\n\t\t\telse {\n\t\t\t\tclient_say('received version', client_ver);\n\t\t\t}\n\t\t\tvar content, state, version, length;\n\t\t\tclient.on('data', function (chunk) {\n\t\t\t\t\tif (content === null || content === undefined) {\n\t\t\t\t\t\tclient_say('received the response');\n\t\t\t\t\t\tresponse = unpack('>2HL', chunk)\n\t\t\t\t\t\tserver_say('>2HL', response)\n\t\t\t\t\t\tstate   = response[0]\n\t\t\t\t\t\tversion = response[1]\n\t\t\t\t\t\tlength  = response[2]\n\t\t\t\t\t\tcontent = chunk.slice(8)\n\t\t\t\t\t\tclient_say('processing the response #1', state, version, length)\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tclient_say('received following the response ')\n\t\t\t\t\t\tcontent = ConcatBuffer(content, chunk)\n\t\t\t\t\t}\n\t\t\t\t\tif (content.length >= length) {\n\t\t\t\t\t\tvar err = null\n\t\t\t\t\t\tclient_say('processing the response #2', state, version);\n\n\t\t\t\t\t\tif (state == SphinxClient.SEARCHD_WARNING) {\n\t\t\t\t\t\t\tvar wend = 4 + unpack('>L', content)\n\t\t\t\t\t\t\twarning = content.slice(4, wend);\n\t\t\t\t\t\t\t// TODO do something with the warning !!!\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (state == SphinxClient.SEARCHD_ERROR) {\n\t\t\t\t\t\t\terr = new Error('searchd error: ' + content.slice(4).toString())\n\t\t\t\t\t\t\tcontent = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (state == SphinxClient.SEARCHD_RETRY) {\n\t\t\t\t\t\t\terr = new Error('temporary searchd error: ' + content.slice(4).toString())\n\t\t\t\t\t\t\tcontent = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (state != SphinxClient.SEARCHD_OK) {\n\t\t\t\t\t\t\terr = new Error('unknown status code ' + state)\n\t\t\t\t\t\t\tcontent = null;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (version < client_ver) {\n\t\t\t\t\t\t\tself._warning = util.format('searchd command v.%d.%d older than client\\'s v.%d.%d, some options might not work',\n\t\t\t\t\t\t\t\tversion>>8, version&0xff, client_ver>>8, client_ver&0xff)\n\t\t\t\t\t\t\t// TODO do something with the warning !!!\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tclient.end()\n\t\t\t\t\t\tfn(err, content)\n\t\t\t\t\t}\n        }\n      );\n\t\t\tclient_say('sending a request', request.toString());\n//      process.stdout.write(request.toString('hex')+'\\n')\n\t\t\tclient.write(request);\n    }\n  );\n\tclient.on('end', function () {\n\t\t\tclient_say('disconnected');\n    }\n  );\n\tclient.on('error', function (err) {\n\t\t\tfn(new Error('searchd connexion error'))\n    }\n  );\n\tclient.write(pack('>L', 1))\n};\n\nSphinxClient.prototype.GetLastError = function () {\n  var self = this\n\treturn self._error\n};\nSphinxClient.prototype.GetLastWarning = function () {\n  var self = this\n\treturn self._warning\n};\n/**\n* Set searchd server host and port.\n*\n* @api public\n*/\nSphinxClient.prototype.SetServer = function (host, port) {\n  var self = this\n\tassert.equal(typeof host, 'string')\n\tassert.equal(typeof port, 'number')\n\tself._host = host;\n\tself._port = port;\n};\nSphinxClient.prototype.SetConnectTimeout = function (timeout ) {\n  var self = this\n\tassert.equal(typeof timeout, 'number')\n\tself._timeout = Math.max(0.001, timeout);\n};\nSphinxClient.prototype.SetLimits = function (offset, limit, maxmatches, cutoff) {\n  var self = this\n\tassert.equal(typeof offset, 'number')\n\tassert.equal(typeof limit, 'number')\n\tassert(0 <= offset < 16777216)\n\tassert(0 <= limit < 16777216)\n\tif (maxmatches === undefined) {\n\t\tmaxmatches = 0\n\t}\n\tif (cutoff === undefined) {\n\t\tcutoff = 0\n\t}\n\tassert(maxmatches >= 0)\n\tself._offset = offset\n\tself._limit = limit\n\tif (maxmatches > 0) {\n\t\tself._maxmatches = maxmatches\n\t}\n\tif (cutoff >= 0) {\n\t\tself._cutoff = cutoff\n\t}\n};\nSphinxClient.prototype.SetMaxQueryTime = function (maxquerytime) {\n  var self = this\n\tassert.equal(typeof maxquerytime, 'number')\n\tassert(maxquerytime > 0)\n\tself._maxquerytime = maxquerytime\n};\nSphinxClient.prototype.SetMatchMode = function (mode) {\n  var self = this\n\tvar modes = [SphinxClient.SPH_MATCH_ALL, SphinxClient.SPH_MATCH_ANY, SphinxClient.SPH_MATCH_PHRASE, SphinxClient.SPH_MATCH_BOOLEAN, SphinxClient.SPH_MATCH_EXTENDED, SphinxClient.SPH_MATCH_FULLSCAN, SphinxClient.SPH_MATCH_EXTENDED2]\n\tassert(modes.some(function (x) { return (x === mode) }))\n\tself._mode = mode\n};\nSphinxClient.prototype.SetRankingMode = function (ranker, rankexpr) {\n  var self = this\n  if (rankexpr === undefined) {\n    rankexpr = ''\n  }\n\tassert(0 <= ranker && ranker < SphinxClient.SPH_RANK_TOTAL)\n\tself._ranker = ranker\n\tself._rankexpr = rankexpr\n};\nSphinxClient.prototype.SetSortMode = function (mode, clause) {\n  var self = this\n  var modes = [SphinxClient.SPH_SORT_RELEVANCE, SphinxClient.SPH_SORT_ATTR_DESC, SphinxClient.SPH_SORT_ATTR_ASC, SphinxClient.SPH_SORT_TIME_SEGMENTS, SphinxClient.SPH_SORT_EXTENDED, SphinxClient.SPH_SORT_EXPR]\n  if (clause === undefined) {\n    clause = ''\n  }\n  assert(modes.some(function (x) { return (x === mode) }))\n\tassert.equal(typeof clause, 'string')\n  self._sort = mode\n  self._sortby = clause\n};\nSphinxClient.prototype.SetWeights = function (weights) {\n  var self = this\n\tassert(Array.isArray(weights))\n\tforEach(weights, function (item, index) {\n\t\t\tassert.equal(typeof item, 'number')\n\t})\n\tself._weights = weights\n};\nSphinxClient.prototype.SetFieldWeights = function (weights) {\n  var self = this\n\tassert.equal(typeof weights, 'object')\n\tforEach(weights, function (item, index) {\n\t\t\tassert.equal(typeof item, 'number')\n\t})\n\tself._fieldweights = weights\n};\nSphinxClient.prototype.SetIndexWeights = function (weights) {\n  var self = this\n\tassert.equal(typeof weights, 'object')\n\tforEach(weights, function (item, index) {\n\t\t\tassert.equal(typeof item, 'number')\n\t})\n\tself._indexweights = weights\n};\nSphinxClient.prototype.SetIDRange = function (minid, maxid) {\n  var self = this\n\tassert.equal(typeof minid, 'number')\n\tassert.equal(typeof maxid, 'number')\n\tassert(minid <= maxid)\n\tself._min_id = minid\n\tself._max_id = maxid\n};\nSphinxClient.prototype.SetFilter = function (attribute, values, exclude) {\n  var self = this\n  if (exclude === undefined) {\n    exclude = 0\n  }\n\tassert.equal(typeof attribute, 'string')\n\tforEach(values, function (item, index) {\n\t\t\tassert.equal(typeof item, 'number')\n\t})\n\tself._filters.push({\n\t\t\t'type': SphinxClient.SPH_FILTER_VALUES,\n\t\t\t'attr': attribute,\n\t\t\t'exclude': exclude,\n\t\t\t'values': values\n\t\t})\n  };\nSphinxClient.prototype.SetFilterRange = function (attribute, min_, max_, exclude) {\n    var self = this\n    if (exclude === undefined) {\n      exclude = 0\n    }\n    assert.equal(typeof attribute, 'string')\n    assert.equal(typeof min_, 'number')\n    assert.equal(typeof max_, 'number')\n    assert(min_<=max_)\n\n    self._filters.push({\n        'type': SphinxClient.SPH_FILTER_RANGE\n        , 'attr': attribute\n        , 'exclude': exclude\n        , 'min': min_\n        , 'max': max_\n      } )\n  }\n\nSphinxClient.prototype.SetFilterFloatRange = function (attribute, min_, max_, exclude) {\n    var self = this\n    if (exclude === undefined) {\n        exclude = 0\n    }\n    assert.equal(typeof attribute, 'string')\n    assert.equal(typeof min_, 'number')\n    assert.equal(typeof max_, 'number')\n    assert(min_<=max_)\n\n    self._filters.push({\n        'type': SphinxClient.SPH_FILTER_FLOATRANGE,\n        'attr': attribute,\n        'exclude': exclude,\n        'min': min_,\n        'max': max_\n    } )\n}\n\nSphinxClient.prototype.SetGeoAnchor = function (attrlat, attrlong, latitude, longitude) {\n  var self = this\n\tassert.equal(typeof attrlat, 'string')\n\tassert.equal(typeof attrlong, 'string')\n\tassert.equal(typeof latitude, 'number')\n\tassert.equal(typeof longitude, 'number')\n\tself._anchor['attrlat'] = attrlat\n\tself._anchor['attrlong'] = attrlong\n\tself._anchor['lat'] = latitude\n\tself._anchor['long'] = longitude\n};\nSphinxClient.prototype.SetGroupBy = function (attribute, func, groupsort ) {\n  var self = this\n\tif (groupsort == undefined) groupsort = '@group desc';\n\tassert.equal(typeof attribute, 'string')\n\tassert.equal(typeof groupsort, 'string')\n\tvar funcs = [SphinxClient.SPH_GROUPBY_DAY, SphinxClient.SPH_GROUPBY_WEEK, SphinxClient.SPH_GROUPBY_MONTH, SphinxClient.SPH_GROUPBY_YEAR, SphinxClient.SPH_GROUPBY_ATTR, SphinxClient.SPH_GROUPBY_ATTRPAIR]\n\tassert(funcs.some(function (x) { return (x === func) }))\n\tself._groupby = attribute\n\tself._groupfunc = func\n\tself._groupsort = groupsort\n};\nSphinxClient.prototype.SetGroupDistinct = function (attribute) {\n  var self = this\n\tassert.equal(typeof attribute, 'string')\n\tself._groupdistinct = attribute\n};\nSphinxClient.prototype.SetRetries = function (count, delay) {\n  var self = this\n\tif (delay == undefined) delay = 0;\n\tassert.equal(typeof count, 'number')\n\tassert.equal(typeof delay, 'number')\n\tassert(count >= 0)\n\tassert(delay >= 0)\n\tself._retrycount = count\n\tself._retrydelay = delay\n};\nSphinxClient.prototype.SetOverride = function (name, type, values) {\n  var self = this\n\tassert.equal(typeof name, 'string')\n\tassert(SphinxClient.SPH_ATTR_TYPES.some(function (x) { return (x === type) }))\n\tassert.equal(typeof values, 'object')\n\tself._overrides[name] = {\n\t\t'name': name,\n\t\t'type': type,\n\t\t'values': values\n\t}\n};\nSphinxClient.prototype.SetSelect = function (select) {\n  var self = this\n\tassert.equal(typeof select, 'string')\n\tself._select = select\n};\nSphinxClient.prototype.ResetOverrides = function () {\n  var self = this\n\tself._overrides = {}\n};\nSphinxClient.prototype.ResetFilters = function () {\n  var self = this\n\tself._filters = []\n\tself._anchor = {}\n};\nSphinxClient.prototype.ResetGroupBy = function () {\n  var self = this\n\tself._groupby = ''\n\tself._groupfunc = SphinxClient.SPH_GROUPBY_DAY\n\tself._groupsort = '@group desc'\n\tself._groupdistinct = ''\n};\n/**\n* Connect to searchd server and run given search query.\n*\n* @api public\n*/\nSphinxClient.prototype.Query = function (query, index, comment, fn) {\n  var self = this\n\tif (arguments.length == 2) {\n\t\tfn = arguments[1];\n\t\tindex = '*';\n\t\tcomment = '';\n\t}\n\telse if (arguments.length == 3) {\n\t\tfn = arguments[2];\n\t\tcomment = '';\n\t}\n\tself.AddQuery(query, index, comment)\n\n\tself.RunQueries(function (err, results) {\n\t\t\tself._reqs = [] // we won't re-run erroneous batch\n\n\t\t\tif (err) {\n\t\t\t\tfn(err, null)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (results.length == 0) {\n\t\t\t\tfn(err, null)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tself._error = results[0].error\n\t\t\tself._warning = results[0].warning\n\t\t\tif (results[0].status == SphinxClient.SEARCHD_ERROR) {\n\t\t\t\tfn(results[0].error, null)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tfn(err, results[0])\n\t})\n\n};\n/**\n* Add query to batch.\n*\n* @api public\n*/\nSphinxClient.prototype.AddQuery = function (query, index, comment) {\n  var self = this\n\tif (index === undefined) index = '*';\n\tif (comment === undefined) comment = '';\n\tassert.equal(typeof query, 'string');\n\tvar req = []\n\treq.push(pack('>LLLL', [self._offset, self._limit, self._mode, self._ranker]))\n\tif (self._ranker == SphinxClient.SPH_RANK_EXPR) {\n\t\treq.push(pack('>L', [len(self._rankexpr)]))\n\t\treq.push(self._rankexpr)\n\t}\n\treq.push(pack('>L', [self._sort]))\n\treq.push(pack('>L', [len(self._sortby)]))\n\treq.push(self._sortby)\n\t// TODO : check if query is encoding in utf8\n\n\treq.push(pack('>L', [len(query)]))\n\treq.push(query)\n\n\treq.push(pack('>L', [len(self._weights)]))\n\tforEach(self._weights, function (item, index) {\n\t\t\treq.push(pack('>L', [item])) // FIXME / TO VERIFY\n\t});\n\treq.push(pack('>L', [len(index)]))\n\treq.push(index)\n\treq.push(pack('>L', [1])) // id64 range marker\n\n  //    req.push(pack('>Q',  [self._min_id]))\n  req.push(packUInt64(self._min_id))\n  //    req.push(pack('>Q', [self._max_id]))\n  req.push(packUInt64(self._max_id))\n\n\t// filters\n\treq.push(pack('>L', [len(self._filters)]))\n\tforEach(self._filters, function (f, index) {\n\t\t\treq.push(pack('>L', [len(f.attr)]))\n\t\t\treq.push(f.attr)\n\t\t\tvar filtertype = f.type\n\t\t\treq.push(pack('>L', [filtertype]))\n\t\t\tif (filtertype == SphinxClient.SPH_FILTER_VALUES) {\n\t\t\t\treq.push(pack('>L', [len(f.values)]))\n\t\t\t\tforEach(f.values, function (val, index) {\n            //            req.push(pack('>q', [val]))\n            req.push(packUInt64(val))\n\t\t\t\t});\n\t\t\t} else if (filtertype == SphinxClient.SPH_FILTER_RANGE) {\n        //        req.push(pack('>q', [f.min]))\n        req.push(packUInt64(f.min))\n        //        req.push(pack('>q', [f.max]))\n        req.push(packUInt64(f.max))\n\t\t\t}\n\t\t\telse if (filtertype == SphinxClient.SPH_FILTER_FLOATRANGE) {\n\t\t\t\treq.push(pack ('>f', [f.min]))\n\t\t\t\treq.push(pack ('>f', [f.max]))\n      }\n      req.push(pack('>L', [f.exclude]))\n\t});\n\n\t// group-by, max-matches, group-sort\n\treq.push(pack('>LL', [self._groupfunc, len(self._groupby)]))\n\treq.push(self._groupby)\n\treq.push(pack('>LL', [self._maxmatches, len(self._groupsort)]))\n\treq.push(self._groupsort)\n\treq.push(pack('>LLL', [self._cutoff, self._retrycount, self._retrydelay]))\n\treq.push(pack('>L', [len(self._groupdistinct)]))\n\treq.push(self._groupdistinct)\n\n\t// anchor point\n\tif (len(self._anchor) == 0) {\n\t\treq.push(pack('>L', [0]))\n\t}\n\telse {\n\t\treq.push(pack('>L', [1]))\n    req.push(pack('>L', [len(self._anchor.attrlat)]) + self._anchor.attrlat)\n    req.push(pack('>L', [len(self._anchor.attrlong)]) + self._anchor.attrlong)\n\t\treq.push(pack('>f', [self._anchor.lat]))\n    req.push(pack('>f', [self._anchor.long]))\n\t}\n\n\t// per-index weights\n\treq.push(pack('>L', [len(self._indexweights)]))\n\n\tforEach(self._indexweights, function (weight, index) {\n\t\t\treq.push(pack('>L', [len(index)]))\n\t\t\treq.push(index)\n\t\t\treq.push(pack('>L', [weight]))\n\t});\n\n\t// max query time\n\treq.push(pack('>L', [self._maxquerytime]))\n\n\t// per-field weights\n\treq.push(pack('>L', [len(self._fieldweights)]))\n\tforEach(self._fieldweights, function (weight, field) {\n\t\t\treq.push(pack('>L', [len(field)]))\n\t\t\treq.push(field)\n\t\t\treq.push(pack('>L', [weight]))\n\t});\n\n\t// comment\n\treq.push(pack('>L', [len(comment)]))\n\treq.push(comment)\n\n\t// attribute overrides\n\treq.push(pack('>L', [len(self._overrides)]))\n\n\tforEach(self._overrides, function (v, index) {\n\t\t\treq.push(pack('>L', [len(v['name'])]))\n\t\t\treq.push(v['name'])\n\t\t\treq.push(pack('>LL', [v['type'], len(v['values'])]))\n\t\t\tforEach(v['values'], function (value, id) {\n          //          req.push(pack('>Q', [id]))\n          req.push(packUInt64(id))\n\t\t\t\t\tif (v['type'] == SphinxClient.SPH_ATTR_FLOAT) {\n\t\t\t\t\t\treq.push(pack('>f', [value]))\n\t\t\t\t\t}\n\t\t\t\t\telse if (v['type'] == SphinxClient.SPH_ATTR_BIGINT) {\n            //            req.push(pack('>q', [value]))\n            req.push(packInt64(id))\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treq.push(pack('>l', [value]))\n\t\t\t\t\t}\n\t\t\t});\n\t});\n\n\t// select-list\n\treq.push(pack('>L', [len(self._select)]))\n\treq.push(self._select)\n\n\t// send query, get response\n\treq = req.reduce(ReduceBuffer, new Buffer(''));\n\n\tself._reqs.push(req)\n\n\tdebug('New Request Added', req.toString());\n\treturn self._reqs.length - 1\n};\n/**\n* Run queries batch.\n* Returns None on network IO failure; or an array of result set hashes on success.\n* @api public\n*/\nSphinxClient.prototype.RunQueries = function (fn) {\n  var self = this\n\tvar nreqs = self._reqs.length\n\n\tdebug('Pool requests Size : '+ nreqs)\n\tif (nreqs == 0) {\n\t\tself._error = 'no queries defined, issue AddQuery() first'\n\t\treturn null\n\t}\n\n\tvar req = self._reqs.reduce(ReduceBuffer, new Buffer(''));\n\n\tvar length = req.length + 8\n\tdebug('Combined '+nreqs+' requests', req.toString())\n\tclient_say('>HHLLL', [SphinxClient.SEARCHD_COMMAND_SEARCH, SphinxClient.VER_COMMAND_SEARCH, length, 0, nreqs]);\n\tvar request = ConcatBuffer(pack('>HHLLL', [SphinxClient.SEARCHD_COMMAND_SEARCH, SphinxClient.VER_COMMAND_SEARCH, length, 0, self._reqs.length]), req)\n\tself._SendRequest(SphinxClient.VER_COMMAND_SEARCH, request, function (err, response) {\n\n\t\tif (response === null || response === undefined) {\n\t\t\treturn fn(err, results)\n\t\t}\n\t\t// parse response\n\t\tvar max_ = response.length\n\t\tvar p = 0\n\t\tvar results = []\n\t\tfor (var i = 0; i < nreqs; i++) {\n\t\t\tdebug('Parsing request #'+i)\n\t\t\tvar result = {}\n\t\t\tresults.push(result)\n\n\t\t\tresult['error'] = ''\n\t\t\tresult['warning'] = ''\n\t\t\tresult['status'] = unpack('>L', response.slice(p, p + 4))\n\t\t\tp += 4\n\t\t\tif (result['status'] != SphinxClient.SEARCHD_OK) {\n\t\t\t\tlength = Number(unpack('>L', response.slice(p, p + 4)))\n\t\t\t\tp += 4\n        var message = response.slice(p, p+length)\n\t\t\t\tp += length\n\n\t\t\t\tif (result['status'] == SphinxClient.SEARCHD_WARNING) {\n\t\t\t\t\tresult['warning'] = message.toString()\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tresult['error'] = message.toString()\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n\t\t\t// read schema\n\t\t\tresult['fields'] = []\n\t\t\tvar attrs = []\n\n\t\t\tvar nfields = Number(unpack('>L', response.slice(p, p + 4)))\n\t\t\tp += 4\n\t\t\twhile (nfields > 0 && p < max_) {\n\t\t\t\tnfields -= 1\n\t\t\t\tlength = Number(unpack('>L', response.slice(p, p + 4)))\n\t\t\t\tp += 4\n\t\t\t\tresult['fields'].push(response.slice(p, p + length).toString())\n\t\t\t\tp += length\n\t\t\t}\n\n\t\t\tvar nattrs = Number(unpack('>L', response.slice(p, p + 4)))\n\n\t\t\tp += 4\n\t\t\twhile (nattrs>0 && p<max_) {\n\t\t\t\tnattrs -= 1\n\t\t\t\tlength = Number(unpack('>L', response.slice(p, p + 4)))\n\t\t\t\tp += 4\n\t\t\t\tvar attr = response.slice(p, p + length).toString()\n\t\t\t\tp += length\n\t\t\t\tvar type_ = Number(unpack('>L', response.slice(p, p + 4)))\n\t\t\t\tp += 4\n\t\t\t\tattrs.push([attr, type_])\n\t\t\t}\n\t\t\tresult['attrs'] = attrs\n\n\t\t\t// read match count\n\t\t\tvar count = Number(unpack('>L', response.slice(p, p + 4)))\n\t\t\tp += 4\n\t\t\tvar id64 = Number(unpack('>L', response.slice(p, p + 4)))\n\t\t\tp += 4\n\n\t\t\t// read matches\n\t\t\tresult['matches'] = []\n\t\t\twhile (count>0 && p<max_) {\n\t\t\t\tvar doc, weight\n\t\t\t\tcount -= 1\n        if (id64) {\n          // doc = Number(unpack('>q', response.slice(p, p + 8)))\n          doc = Number(unpackUInt64(response.slice(p, p + 8)))\n          server_say('>q',doc)\n\t\t\t\t\tp += 8\n          weight = Number(unpack('>L', response.slice(p, p + 4)))\n\t\t\t\t\tp += 4\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdoc = Number(unpack('>L', response.slice(p, p + 4)))\n\t\t\t\t\tp += 4\n          weight = Number(unpack('>L', response.slice(p, p + 4)))\n\t\t\t\t\tp += 4\n\t\t\t\t}\n\n\t\t\t\tvar match = { 'id':doc, 'weight':weight, 'attrs':{} }\n\t\t\t\tfor (var j = 0;  j < result['attrs'].length; j++) {\n\t\t\t\t\tvar attr0 = attrs[j][0]\n\t\t\t\t\tif (attrs[j][1] == SphinxClient.SPH_ATTR_FLOAT) {\n\t\t\t\t\t\tmatch['attrs'][attr0] = Number(unpack('>f', response.slice(p, p + 4)))\n\t\t\t\t\t}\n\t\t\t\t\telse if (attrs[j][1] == SphinxClient.SPH_ATTR_BIGINT) {\n            //            match['attrs'][attr0] = Number(unpack('>q', response.slice(p, p + 8)))\n            match['attrs'][attr0] = Number(unpackUInt64(response.slice(p, p + 8)))\n\t\t\t\t\t\tp += 4\n\t\t\t\t\t}\n\t\t\t\t\telse if (attrs[j][1] == SphinxClient.SPH_ATTR_STRING) {\n\t\t\t\t\t\tvar slen = Number(unpack('>L', response.slice(p, p + 4)))\n\t\t\t\t\t\tp += 4\n\t\t\t\t\t\tmatch['attrs'][attr0] = ''\n\t\t\t\t\t\tif (slen>0) {\n\t\t\t\t\t\t\tmatch['attrs'][attr0] = response.slice(p, p + slen).toString()\n\t\t\t\t\t\t}\n\t\t\t\t\t\tp += slen-4\n\t\t\t\t\t}\n\t\t\t\t\telse if (attrs[j][1] == SphinxClient.SPH_ATTR_MULTI) {\n\t\t\t\t\t\tmatch['attrs'][attr0] = []\n            var nvals = Number(unpack('>L', response.slice(p, p + 4)))\n            p += 4\n\t\t\t\t\t\tfor (var n = 0; n < nvals; n++) {\n\t\t\t\t\t\t\tmatch['attrs'][attr0].push(Number(unpack('>L', response.slice(p, p + 4))))\n\t\t\t\t\t\t\tp += 4\n\t\t\t\t\t\t}\n            p -= 4\n\t\t\t\t\t}\n\t\t\t\t\telse if (attrs[j][1] == SphinxClient.SPH_ATTR_MULTI64) {\n\t\t\t\t\t\tmatch['attrs'][attr0] = []\n\t\t\t\t\t\tnvals = Number(unpack('>L', response.slice(p, p + 4)))\n\t\t\t\t\t\tnvals = nvals/2\n\t\t\t\t\t\tp += 4\n\t\t\t\t\t\tfor (var n = 0; n < nvals; n++) {\n              //              match['attrs'][attr0].push(Number(unpack('>q', response.slice(p, p + 8))))\n              match['attrs'][attr0].push(Number(unpackUInt64(response.slice(p, p + 8))))\n\t\t\t\t\t\t\tp += 8\n\t\t\t\t\t\t}\n            p -= 4\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tmatch['attrs'][attr0] = Number(unpack('>L', response.slice(p, p + 4)))\n\t\t\t\t\t}\n\t\t\t\t\tp += 4\n\t\t\t\t}\n\t\t\t\tresult['matches'].push( match )\n\t\t\t}\n\t\t\tresult['total'] = Number(unpack('>L', response.slice(p, p + 4)))\n\t\t\tp += 4\n\t\t\tresult['total_found'] = Number(unpack('>L', response.slice(p, p + 4)))\n\t\t\tp += 4\n\t\t\tresult['time'] = Number(unpack('>L', response.slice(p, p + 4)))\n\t\t\tp += 4\n\t\t\tvar words = Number(unpack('>L', response.slice(p, p + 4)))\n\t\t\tp += 4\n\n\t\t\tresult['time'] = (result['time']/1000.0)\n\n\t\t\tresult['words'] = []\n\t\t\twhile (words>0) {\n\t\t\t\twords -= 1\n\t\t\t\tvar length = Number(unpack('>L', response.slice(p, p + 4)))\n\t\t\t\tp += 4\n\t\t\t\tvar word = response.slice(p, p + length).toString()\n\t\t\t\tp += length\n\t\t\t\tvar docs = Number(unpack('>L', response.slice(p, p + 4)))\n\t\t\t\tp += 4\n\t\t\t\tvar hits = Number(unpack('>L', response.slice(p, p + 4)))\n\t\t\t\tp += 4\n\n\t\t\t\tresult['words'].push({'word':word, 'docs':docs, 'hits':hits})\n\t\t\t}\n\t\t}\n\n\t\tfn(err, results)\n\t})\n\n    this._reqs = []\n};\nSphinxClient.prototype.BuildExcerpts = function (docs, index, words, opts, cb) {\n\tassert.equal(Array.isArray(docs), true);\n\tassert.equal(typeof index, 'string');\n\tassert.equal(typeof words, 'string');\n\tif (opts) {\n\t\tassert.equal(typeof opts, 'object');\n\t} else {\n\t\topts = {};\n\t}\n\n\topts.before_match         = typeof opts.before_match !== 'undefined'         ? opts.before_match         : \"<b>\";\n\topts.after_match          = typeof opts.after_match !== 'undefined'          ? opts.after_match          : \"</b>\";\n\topts.chunk_separator      = typeof opts.chunk_separator !== 'undefined'      ? opts.chunk_separator      : \" ... \";\n\topts.limit                = typeof opts.limit !== 'undefined'                ? opts.limit                : 256;\n\topts.limit_passages       = typeof opts.limit_passages !== 'undefined'       ? opts.limit_passages       : 0;\n\topts.limit_words          = typeof opts.limit_words !== 'undefined'          ? opts.limit_words          : 0;\n\topts.around               = typeof opts.around !== 'undefined'               ? opts.around               : 5;\n\topts.exact_phrase         = typeof opts.exact_phrase !== 'undefined'         ? opts.exact_phrase         : false;\n\topts.single_passage       = typeof opts.single_passage !== 'undefined'       ? opts.single_passage       : false;\n\topts.use_boundaries       = typeof opts.use_boundaries !== 'undefined'       ? opts.use_boundaries       : false;\n\topts.weight_order         = typeof opts.weight_order !== 'undefined'         ? opts.weight_order         : false;\n\topts.query_mode           = typeof opts.query_mode !== 'undefined'           ? opts.query_mode           : false;\n\topts.force_all_words      = typeof opts.force_all_words !== 'undefined'      ? opts.force_all_words      : false;\n\topts.start_passage_id     = typeof opts.start_passage_id !== 'undefined'     ? opts.start_passage_id     : 1;\n\topts.load_files           = typeof opts.load_files !== 'undefined'           ? opts.load_files           : false;\n\topts.html_strip_mode      = typeof opts.html_strip_mode !== 'undefined'      ? opts.html_strip_mode      : \"index\";\n\topts.allow_empty          = typeof opts.allow_empty !== 'undefined'          ? opts.allow_empty          : false;\n\topts.passage_boundary     = typeof opts.passage_boundary !== 'undefined'     ? opts.passage_boundary     : \"none\";\n\topts.emit_zones           = typeof opts.emit_zones !== 'undefined'           ? opts.emit_zones           : false;\n\topts.load_files_scattered = typeof opts.load_files_scattered !== 'undefined' ? opts.load_files_scattered : false;\n\n\tvar flags = 1; // remove spaces\n\tif (opts.exact_phrase) flags = flags | 2;\n\tif (opts.single_passage) flags = flags | 4;\n\tif (opts.use_boundaries) flags = flags | 8;\n\tif (opts.weight_order) flags = flags | 16;\n\tif (opts.query_mode) flags = flags | 32;\n\tif (opts.force_all_words) flags = flags | 64;\n\tif (opts.load_files) flags = flags | 128;\n\tif (opts.allow_empty) flags = flags | 256;\n\tif (opts.emit_zones) flags = flags | 512;\n\tif (opts.load_files_scattered) flags = flags | 1024;\n\n\tvar req = [];\n\n\treq.push(pack('>LL', [ 0, flags ]));\n\treq.push(pack('>L', [len(index)]), index);\n\treq.push(pack('>L', [len(words)]), words);\n\n\treq.push(pack('>L', [len(opts.before_match)]), opts.before_match);\n\treq.push(pack('>L', [len(opts.after_match)]), opts.after_match);\n\treq.push(pack('>L', [len(opts.chunk_separator)]), opts.chunk_separator);\n\treq.push(pack('>LL', [opts.limit, opts.around]));\n\treq.push(pack('>LLL', [opts.limit_passages, opts.limit_words, opts.start_passage_id]));\n\treq.push(pack('>L', [len(opts.html_strip_mode)]), opts.html_strip_mode);\n\treq.push(pack('>L', [len(opts.passage_boundary)]), opts.passage_boundary);\n\treq.push(pack('>L', [docs.length]));\n\n\tfor (var i = 0, l = docs.length; i < l; i++) {\n\t\tvar doc = docs[i];\n\t\tassert.equal(typeof doc, 'string');\n\t\treq.push(pack('>L', [len(doc)]), doc);\n\t}\n\n\tvar reqData = req.reduce(ReduceBuffer, new Buffer(''));\n\tvar length = reqData.length;\n\n\tdebug('Build excerpts request:', reqData.toString());\n\n\tvar request = ConcatBuffer(pack('>HHL', [SphinxClient.SEARCHD_COMMAND_EXCERPT, SphinxClient.VER_COMMAND_EXCERPT, length]), reqData);\n\tthis._SendRequest(SphinxClient.VER_COMMAND_EXCERPT, request, function (err, response) {\n\t\tif (err) {\n\t\t\treturn cb(err, null);\n\t\t}\n\t\tvar results = [], p = 0, rlen = response.length;\n\t\tfor (var i = 0, l = docs.length; i < l; i++) {\n\t\t\tvar len = unpack('>L', response.slice(p, p + 4))[0];\n\t\t\tp += 4;\n\t\t\tif (p + len > rlen) {\n\t\t\t\treturn cb(new Error('Incomplete reply from searchd'), null);\n\t\t\t}\n\t\t\tresults.push(len ? response.slice(p, p + len).toString('utf8') : '');\n\t\t\tp += len;\n\t\t}\n\t\tcb(null, results);\n\t\treturn null;\n\t});\n};\nSphinxClient.prototype.UpdateAttributes = function (index, attrs, values, mva) {\n\tif (mva === undefined) mva = false;\n};\nSphinxClient.prototype.BuildKeywords = function (query, index, hits ) {\n};\n\n/**\n* Get the status\n*\n* @api public\n*/\nSphinxClient.prototype.Status = function (fn) {\n  var self = this\n\tclient_say('>2HLL', [SphinxClient.SEARCHD_COMMAND_STATUS, SphinxClient.VER_COMMAND_STATUS, 4, 1]);\n\tvar request = pack( '>2HLL', [SphinxClient.SEARCHD_COMMAND_STATUS, SphinxClient.VER_COMMAND_STATUS, 4, 1])\n\tself._SendRequest(SphinxClient.VER_COMMAND_STATUS, request, function (err, response) {\n\t\tvar result = {}, p = 8;\n\t\tif (!err) while (p < response.length) {\n\t\t\tvar length, k, v;\n\t\t\tlength = Number(unpack('>L', response.slice(p, p + 4)))\n\t\t\tk = response.slice(p + 4, p + length + 4)\n\t\t\tp += 4 + length\n\t\t\tlength = Number(unpack('>L', response.slice(p, p + 4)))\n\t\t\tv = response.slice(p + 4, p + length + 4)\n\t\t\tp += 4 + length\n\t\t\tresult[k] = v.toString()\n\t\t}\n\t\tfn(err, result);\n\t})\n};\nSphinxClient.prototype.Open = function (fn) {\n//  var self = this\n// command, command version = 0, body length = 4, body = 1\n//        var request = pack ( '>hhII', [SphinxClient.SEARCHD_COMMAND_PERSIST, 0, 4, 1] )\n//        self._SendRequest(null, request, function (err, response) {\n//                fn(err, null)\n//        })\n};\nSphinxClient.prototype.Close = function () {\n};\nSphinxClient.prototype.EscapeString = function (string) {\n//    return re.sub(r\"([=\\(\\)|\\-!@~\\\"&/\\\\\\^\\$\\=])\", r\"\\\\\\1\", string)\n\n\n};\nSphinxClient.prototype.FlushAttributes = function (fn) {\n  var self = this\n\tvar request = pack ( '>hhI', [SphinxClient.SEARCHD_COMMAND_FLUSHATTRS, SphinxClient.VER_COMMAND_FLUSHATTRS, 0] )\n\tself._SendRequest(SphinxClient.VER_COMMAND_FLUSHATTRS, request, function (err, response) {\n\t\tif (err) {\n\t\t\treturn fn(err, null)\n\t\t}\n\t\tif (response.length != 4) {\n\t\t\tself._error = 'unexpected response length'\n\t\t\treturn fn(err, null)\n\t\t}\n\t\tvar tag = Number(unpack('>L', response.slice(0, 4)))\n\t\treturn fn(err, tag)\n\t})\n};\n\n\n// known searchd commands\nSphinxClient.SEARCHD_COMMAND_SEARCH\t\t= 0\nSphinxClient.SEARCHD_COMMAND_EXCERPT\t\t= 1\nSphinxClient.SEARCHD_COMMAND_UPDATE\t\t= 2\nSphinxClient.SEARCHD_COMMAND_KEYWORDS\t= 3\nSphinxClient.SEARCHD_COMMAND_PERSIST\t\t= 4\nSphinxClient.SEARCHD_COMMAND_STATUS\t\t= 5\nSphinxClient.SEARCHD_COMMAND_FLUSHATTRS\t= 7\n\n// current client-side command implementation versions\nSphinxClient.VER_COMMAND_SEARCH\t\t= 0x119\nSphinxClient.VER_COMMAND_EXCERPT\t= 0x104\nSphinxClient.VER_COMMAND_UPDATE\t\t= 0x102\nSphinxClient.VER_COMMAND_KEYWORDS\t= 0x100\nSphinxClient.VER_COMMAND_STATUS\t\t= 0x100\nSphinxClient.VER_COMMAND_FLUSHATTRS\t= 0x100\n\n// known searchd status codes\nSphinxClient.SEARCHD_OK\t\t\t\t= 0\nSphinxClient.SEARCHD_ERROR\t\t\t= 1\nSphinxClient.SEARCHD_RETRY\t\t\t= 2\nSphinxClient.SEARCHD_WARNING\t\t= 3\n\n// known match modes\nSphinxClient.SPH_MATCH_ALL\t\t\t= 0\nSphinxClient.SPH_MATCH_ANY\t\t\t= 1\nSphinxClient.SPH_MATCH_PHRASE\t\t= 2\nSphinxClient.SPH_MATCH_BOOLEAN\t\t= 3\nSphinxClient.SPH_MATCH_EXTENDED\t\t= 4\nSphinxClient.SPH_MATCH_FULLSCAN\t\t= 5\nSphinxClient.SPH_MATCH_EXTENDED2\t= 6\n\n// known ranking modes (extended2 mode only)\nSphinxClient.SPH_RANK_PROXIMITY_BM25= 0 // default mode, phrase proximity major factor and BM25 minor one\nSphinxClient.SPH_RANK_BM25\t\t\t= 1 // statistical mode, BM25 ranking only (faster but worse quality)\nSphinxClient.SPH_RANK_NONE\t\t\t= 2 // no ranking, all matches get a weight of 1\nSphinxClient.SPH_RANK_WORDCOUNT\t\t= 3 // simple word-count weighting, rank is a weighted sum of per-field keyword occurence counts\nSphinxClient.SPH_RANK_PROXIMITY\t\t= 4\nSphinxClient.SPH_RANK_MATCHANY\t\t= 5\nSphinxClient.SPH_RANK_FIELDMASK\t\t= 6\nSphinxClient.SPH_RANK_SPH04\t\t\t= 7\nSphinxClient.SPH_RANK_EXPR\t\t\t= 8\nSphinxClient.SPH_RANK_TOTAL\t\t\t= 9\n\n// known sort modes\nSphinxClient.SPH_SORT_RELEVANCE\t\t= 0\nSphinxClient.SPH_SORT_ATTR_DESC\t\t= 1\nSphinxClient.SPH_SORT_ATTR_ASC\t\t= 2\nSphinxClient.SPH_SORT_TIME_SEGMENTS\t= 3\nSphinxClient.SPH_SORT_EXTENDED\t\t= 4\nSphinxClient.SPH_SORT_EXPR\t\t\t= 5\n\n// known filter types\nSphinxClient.SPH_FILTER_VALUES\t\t= 0\nSphinxClient.SPH_FILTER_RANGE\t\t= 1\nSphinxClient.SPH_FILTER_FLOATRANGE\t= 2\n\n// known attribute types\nSphinxClient.SPH_ATTR_NONE\t\t\t= 0\nSphinxClient.SPH_ATTR_INTEGER\t\t= 1\nSphinxClient.SPH_ATTR_TIMESTAMP\t\t= 2\nSphinxClient.SPH_ATTR_ORDINAL\t\t= 3\nSphinxClient.SPH_ATTR_BOOL\t\t\t= 4\nSphinxClient.SPH_ATTR_FLOAT\t\t\t= 5\nSphinxClient.SPH_ATTR_BIGINT\t\t= 6\nSphinxClient.SPH_ATTR_STRING\t\t= 7\nSphinxClient.SPH_ATTR_MULTI\t\t\t= 0x40000001\nSphinxClient.SPH_ATTR_MULTI64\t\t= 0x40000002\n\nSphinxClient.SPH_ATTR_TYPES = [\n\tSphinxClient.SPH_ATTR_NONE,\n\tSphinxClient.SPH_ATTR_INTEGER,\n\tSphinxClient.SPH_ATTR_TIMESTAMP,\n\tSphinxClient.SPH_ATTR_ORDINAL,\n\tSphinxClient.SPH_ATTR_BOOL,\n\tSphinxClient.SPH_ATTR_FLOAT,\n\tSphinxClient.SPH_ATTR_BIGINT,\n\tSphinxClient.SPH_ATTR_STRING,\n\tSphinxClient.SPH_ATTR_MULTI,\n\tSphinxClient.SPH_ATTR_MULTI64\n]\n\n// known grouping functions\nSphinxClient.SPH_GROUPBY_DAY\t \t= 0\nSphinxClient.SPH_GROUPBY_WEEK\t\t= 1\nSphinxClient.SPH_GROUPBY_MONTH\t\t= 2\nSphinxClient.SPH_GROUPBY_YEAR\t\t= 3\nSphinxClient.SPH_GROUPBY_ATTR\t\t= 4\nSphinxClient.SPH_GROUPBY_ATTRPAIR\t= 5\n\n\nmodule.exports = SphinxClient;\n"}